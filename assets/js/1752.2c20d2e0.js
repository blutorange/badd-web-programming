"use strict";(self.webpackChunkpackages_lecture=self.webpackChunkpackages_lecture||[]).push([[1752],{81752:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o='const todoTemplate = document.querySelector(".todo-list-item-template");\nconst todoList = document.querySelector(".todo-list");\nconst newTodoInput = document.querySelector(".new-todo");\nconst toggleAll = document.querySelector(".toggle-all");\nconst todoCount = document.querySelector(".todo-count");\nconst filterAll = document.querySelector(".filter-all");\nconst filterActive = document.querySelector(".filter-active");\nconst filterCompleted = document.querySelector(".filter-completed");\nconst clearCompleted = document.querySelector(".clear-completed");\nconst footer = document.querySelector(".footer");\n\nloadItems();\n\n// Neues TODO erzeugen bei Enter im Input\nnewTodoInput.addEventListener("keydown", (e) => {\n  if (e.key === "Enter") {\n    const todoText = document.querySelector(".new-todo").value.trim();\n    if (todoText.length === 0) {\n      return;\n    }\n\n    // Create and add new TODO\n    createNewTodo(todoText, false);\n\n    // Clear new TODO input\n    newTodoInput.value = "";\n\n    updateFooterAndFilter();\n    storeItems();\n  }\n});\n\n// Bei Klick auf Radiobutton am TODO-Item\ntodoList.addEventListener("change", (e) => {\n  const item = e.target.closest(".todo-list-item");\n\n  // Wenn TODO als erledigt / offen markiert wird\n  if (e.target.matches(".toggle")) {\n    item.classList.toggle("completed", e.target.checked);\n    updateFooterAndFilter();\n    storeItems();\n  }\n});\n\n// Bei Klick auf L\xf6sch-Button am TODO-Item\ntodoList.addEventListener("pointerdown", (e) => {\n  const item = e.target.closest(".todo-list-item");\n  if (e.target.matches(".destroy")) {\n    item.remove();\n    updateFooterAndFilter();\n    storeItems();\n  }\n});\n\n// Alle TODOs erledigt oder unerledigt markieren bei Toggle-Button\ntoggleAll.addEventListener("change", () => {\n  const someCompleted = [...todoList.querySelectorAll(".toggle")].some(\n    (item) => item.checked,\n  );\n  const newCompleted = someCompleted ? false : true;\n  for (const item of todoList.querySelectorAll(".toggle")) {\n    item.checked = newCompleted;\n  }\n  for (const item of todoList.querySelectorAll(".todo-list-item")) {\n    item.classList.toggle("completed", newCompleted);\n  }\n  updateFooterAndFilter();\n  storeItems();\n});\n\n// In Bearbeitungsmodus wechseln, wenn TODO doppelt geklickt wird\ntodoList.addEventListener("dblclick", (e) => {\n  const view = e.target.closest(".view");\n  if (view) {\n    // Alle anderen Bearbeitungen abbrechen\n    for (const item of todoList.querySelectorAll(".todo-list-item")) {\n      item.classList.remove("editing");\n    }\n\n    // Neue Bearbeitung starten\n    const item = view.closest(".todo-list-item");\n    const edit = item.querySelector(".edit");\n    const todoText = item.querySelector(".todo-list-item-content").textContent;\n    item.classList.add("editing");\n    edit.value = todoText;\n    edit.focus();\n  }\n});\n\n// TODO aktualisieren, wenn Bearbeitung fertig ist\ntodoList.addEventListener("keydown", (e) => {\n  if (e.target.matches(".edit")) {\n    if (e.key === "Enter") {\n      const item = e.target.closest(".todo-list-item");\n      const itemContent = item.querySelector(".todo-list-item-content");\n      const oldText = itemContent.textContent;\n      const newText = e.target.value.trim();\n      item.classList.remove("editing");\n      itemContent.textContent = newText.length > 0 ? newText : oldText;\n      storeItems();\n    }\n  }\n});\n\n// Alle erledigten L\xf6schen bei Klick auf diesen Button\nclearCompleted.addEventListener("pointerdown", () => {\n  for (const item of todoList.querySelectorAll(".todo-list-item")) {\n    const completed = item.querySelector(".toggle").checked;\n    if (completed) {\n      item.remove();\n    }\n  }\n  storeItems();\n  updateFooterAndFilter();\n});\n\n// Filter f\xfcr alle, aktive, erledigte TODOs\nfilterAll.addEventListener("pointerdown", () => {\n  filterActive.classList.remove("selected");\n  filterCompleted.classList.remove("selected");\n  updateFooterAndFilter();\n});\nfilterActive.addEventListener("pointerdown", () => {\n  filterActive.classList.add("selected");\n  filterCompleted.classList.remove("selected");\n  updateFooterAndFilter();\n});\nfilterCompleted.addEventListener("pointerdown", () => {\n  filterActive.classList.remove("selected");\n  filterCompleted.classList.add("selected");\n  updateFooterAndFilter();\n});\n\nfunction createNewTodo(content, completed) {\n  const newTodo = todoTemplate.content\n    .cloneNode(true)\n    .querySelector(".todo-list-item");\n  newTodo.querySelector(".todo-list-item-content").textContent = content;\n  newTodo.querySelector(".toggle").checked = completed;\n  newTodo.classList.toggle("completed", completed);\n  todoList.append(newTodo);\n}\n\nfunction updateFooterAndFilter() {\n  // Anzahl offener TODOs\n  const uncheckedCount = [...todoList.querySelectorAll(".toggle")].filter(item => !item.checked).length;\n  todoCount.textContent = `${uncheckedCount} TODOs verbleibend!`;\n\n  // Footer ausblenden, wenn keine TODOs\n  const hasAnyItems = todoList.querySelector(".toggle") !== null;\n  footer.classList.toggle("hidden", !hasAnyItems);\n\n  // Filter-Option anwenden\n  if (filterActive.classList.contains("selected")) {\n    for (const item of todoList.querySelectorAll(".todo-list-item")) {\n      const completed = item.querySelector(".toggle").checked;\n      item.classList.toggle("hidden", completed);\n    }\n  } else if (filterCompleted.classList.contains("selected")) {\n    for (const item of todoList.querySelectorAll(".todo-list-item")) {\n      const completed = item.querySelector(".toggle").checked;\n      item.classList.toggle("hidden", !completed);\n    }\n  } else {\n    for (const item of todoList.querySelectorAll(".todo-list-item")) {\n      item.classList.remove("hidden");\n    }\n  }\n}\n\n// Aktuelle TODOs im localStorage speichern\nfunction storeItems() {\n  const itemData = [...todoList.querySelectorAll(".todo-list-item")].map(\n    (item) => {\n      const content = item.querySelector(".todo-list-item-content").textContent;\n      const completed = item.querySelector(".toggle").checked;\n      return { completed, content };\n    },\n  );\n  localStorage.setItem("todo-app-items-native", JSON.stringify(itemData));\n}\n\n// TODOs aus localeStorage laden, entfernt bestehende TODOs\nfunction loadItems() {\n  todoList.innerHTML = "";\n  \n  try {\n    const itemDataString = localStorage.getItem("todo-app-items-native");\n    const itemData = itemDataString ? JSON.parse(itemDataString) : [];\n    for (const item of itemData) {\n      createNewTodo(item.content, item.completed);\n    }\n  } catch (e) {\n    console.error("Could not load items from local storage -- corrupted data?", e);\n  }\n\n  updateFooterAndFilter();\n}\n'}}]);